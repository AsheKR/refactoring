/*  
함수는 데이터보다 다루기가 수월하다.
함수의 이름을 바꾸거나 다른 모듈로 옮기거나, 기존 함수를 전달 함수로 사용할 수 있지만
데이터는 참조하는 모든 부분을 한번에 바꿔야 코드가 동작한다.
데이터의 유효범위가 넓으면 넓을수록 다루기 어려워진다. 때문에 전역변수가 골칫거리이다.

그래서 접근할 수 있는 범위가 넓은 데이터를 옮길 때는 먼저 그 데이터로의 접근을 독점하는 함수를 만드는 식으로
캡슐화하는 것이 가장 좋을 때가 많다. 데이터 재구성(??)이라는 어려운 작업을 함수 재구성이라는 더 단순한 작업으로 변환하는 것이다.

캡슐화는 다른 경우에도 도움을 준다. 데이터를 변경하고 사용하는 코드를 감시할 수 있는 확실한 통로가 되어주기 때문에
데이터 변경 전 검증이나 변경 후 추가 로직을 쉽게 끼워넣을 수 있다. 즉, 결합도를 낮출 수 있다.
저자는 유효범위가 넓은 데이터를 모두 이런 식으로 캡슐화하여 사용한다고 한다.

불변데이터는 가변 데이터보다 캡슐화 할 이유가 적다. 데이터가 변경될 일이 없어서 갱신 전 검증 같은 추가 로직이
자리할 공간을 마련할 필요가 없기 때문이다. 게다가 불변 데이터는 옮길 필요 없이 그냥 복제하면 된다.
그래서 원본 데이터를 참조하는 코드를 변경할 필요도 없고, 데이터를 변형시키는 코드를 걱정할 필요도 없다.
불변성은 강력한 방부제인것이다.

기본 캡슐화 기법으로 참조 데이터를 캡슐화하면, 필드로의 접근이 가능하게 된다. 
때문에 그 값을 바꿀 수 없게 참조 복제본을 반환하도록 수정한다.
참조에 참조를 막기 위해서는 레코드를 캡슐화한다.

여기서 클래스가 처음 나와서 용어 세개를 정리했다.
- 데이터는 두 가지 뜻을 가지고 있는 것 같다.
    - 값으로써의 데이터
    - 참조로써의 데이터 ( 변수 )
- 필드
    - https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/Public_class_fields
    - 필드는 인스턴스 변수를 뜻하는 것 같다
- 레코드
    - https://tc39.es/proposal-record-tuple/
    - Deeply Immutable Object 를 뜻한다
*/


// FIXME: defaultOwner 가 Test 에서 참조되고있다면, Test 도 변경해야하는게 맞을까요? 아니면 테스트가 잘못된걸까요?
export let defaultOwner = {firstName: '마틴', lastName: '파울러'}

export function createSpaceShip() {
    return  {
        'owner': defaultOwner
    }
}

export function changeDefaultOwner() {
    defaultOwner = {firstName: '레베카', lastName: '파슨스'}
}